[{"C:\\Users\\afroj\\Documents\\haia_final\\src\\index.js":"1","C:\\Users\\afroj\\Documents\\haia_final\\src\\App.js":"2","C:\\Users\\afroj\\Documents\\haia_final\\src\\home.js":"3","C:\\Users\\afroj\\Documents\\haia_final\\src\\components\\navbarcomponent.js":"4","C:\\Users\\afroj\\Documents\\haia_final\\src\\dev\\entrylist.js":"5","C:\\Users\\afroj\\Documents\\haia_final\\src\\pages\\entryMod.js":"6","C:\\Users\\afroj\\Documents\\haia_final\\src\\pages\\entry.js":"7","C:\\Users\\afroj\\Documents\\haia_final\\src\\pages\\searchResults.js":"8","C:\\Users\\afroj\\Documents\\haia_final\\src\\pages\\advancedSearch.js":"9","C:\\Users\\afroj\\Documents\\haia_final\\src\\components\\searchbar.js":"10","C:\\Users\\afroj\\Documents\\haia_final\\src\\service\\database.js":"11","C:\\Users\\afroj\\Documents\\haia_final\\src\\http-common.js":"12","C:\\Users\\afroj\\Documents\\haia_final\\src\\dev\\countryList.js":"13","C:\\Users\\afroj\\Documents\\haia_final\\src\\dev\\idNames.js":"14"},{"size":576,"mtime":1682898529534,"results":"15","hashOfConfig":"16"},{"size":3179,"mtime":1682918448331,"results":"17","hashOfConfig":"16"},{"size":1613,"mtime":1682970058607,"results":"18","hashOfConfig":"16"},{"size":993,"mtime":1682942063683,"results":"19","hashOfConfig":"16"},{"size":1085,"mtime":1682564215085,"results":"20","hashOfConfig":"16"},{"size":8172,"mtime":1682911684305,"results":"21","hashOfConfig":"16"},{"size":3497,"mtime":1682976348232,"results":"22","hashOfConfig":"16"},{"size":10977,"mtime":1682975946603,"results":"23","hashOfConfig":"16"},{"size":5562,"mtime":1682985809275,"results":"24","hashOfConfig":"16"},{"size":2130,"mtime":1682962268250,"results":"25","hashOfConfig":"16"},{"size":2905,"mtime":1682892005351,"results":"26","hashOfConfig":"16"},{"size":674,"mtime":1682685882657,"results":"27","hashOfConfig":"16"},{"size":5607,"mtime":1682876667342,"results":"28","hashOfConfig":"16"},{"size":1963,"mtime":1682881689857,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dbbuoa",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\afroj\\Documents\\haia_final\\src\\index.js",[],[],"C:\\Users\\afroj\\Documents\\haia_final\\src\\App.js",["80","81","82","83"],[],"//Framework imports\nimport React from \"react\";\n//Component imports\nimport SearchBar from './components/searchbar';\n//Page imports\nimport Home from './home';\nimport Entry from './pages/entry';\nimport SearchResults from './pages/searchResults';\nimport AdvSearch from './pages/advancedSearch';\nimport EntryMod from './pages/entryMod';\nimport haiastyles from \"./style/haiastyles.css\"\n\nimport { Routes, Route, Link} from \"react-router-dom\";\n\n//The actual contents of the webpage are contained in the app.js file, within this function. The contents of this function are returned to the index.html file.\n//Note that because this is in a js file, some tags are different than in raw html and are accordingly converted when sent over to the html file.\n//        className -> class , as \"class\" is a RESERVED javascript term.\n//        \nfunction App() {\n  //Before reaching the return bloc in any app return section, we may declare any number of variables and work wiht them. REMEMBER THAT!\n  //We may accordingly access those variables wiht the syntax { varname } as if it were either html section code or page text (inwhich case, the contents of the value are converted ot a string before input).\n  //We can also put in CODE within the curly braces, whose contents or return value will be given in the browser or returned as a Stirng.\n  const title = \"Welcome to Hidden's African Image Archive!\";\n\n\n  return (\n    <div className=\"content\">\n      {\n        //This section controls movement between a series of routes, each of which corresponds to an js docuemnt encoding for an html page body, which will control what displays in the client page.\n      }\n      <Routes>\n        {\n          //If I am on the home page, display the contents of the Home class.\n        }\n        <Route path={'/'} element={<Home/>} />\n        <Route path={'/Home'} element={<Home/>} />\n\n\n        {\n          //If I am on advsearch, display the contents of the advsearch class.\n        }\n        <Route path={\"/advsearch\"} element={<AdvSearch/>} />\n        {\n          //If I am on searchResults, display the contents of the searchresults class. This takes in props given by the search components (either advancedsearch.js OR searchbar)\n        }\n        <Route path={'/search/:find'} element={<SearchResults/>} />\n\n\n\n        {\n          /*entry route, given the path (url) \"/entry\" and a given id. Is not an EXACT path because we want the \":id\" section to be malleable for different entries. Uses PROPS to specify entry in the query.\n              the render is not controlled simply using a component part like with Home, but instead by using a specific render function which passes in props. The props will initiate a method call in Entry, which will in turn determine which entry to display.\n          */\n        }\n        <Route path ={'/entry/:hid'} element={<Entry />}\n            />\n        \n        {\n          //If I am on the entryMod page, display the contents of the entryMod class.\n        }\n        <Route path ={'/entryMod'} element={<EntryMod/>} />\n\n\n      </Routes>\n    </div>\n  );\n}\n\n//Return the app contents to the index.html file.\nexport default App;\n\n\n  //Non-switch homepage //<Home />","C:\\Users\\afroj\\Documents\\haia_final\\src\\home.js",["84","85","86","87","88","89"],[],"//Class with homepage.\r\n//**If entrylist does NOT import, check to make sure you have not MOVED it to dev. */\r\n//Imports\r\n\r\n//Image Imports\r\nimport logo from \"./img/haia.png\"\r\n\r\n\r\nimport \"./style/haiastyles.css\"\r\n\r\n//Component Imports-> React\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n//Component Imports-> HAIA\r\nimport Navbar from './components/navbarcomponent';\r\nimport SearchBar from './components/searchbar';\r\n\r\n//Method Imports->React\r\nimport { useState, useEffect } from 'react';\r\n\r\n//Other imports\r\nimport Entrylist from './dev/entrylist';\r\n\r\nconst Home = () => {\r\n\r\n    return ( \r\n        <div className=\"home\">\r\n            <div className = \"top\">\r\n                <div className=\"homeBar\">\r\n                    <img src={logo}/>\r\n                    <span className=\"horzDiv vertCenter\"/>\r\n                    <span className=\"siteHead vertCenter\">Hidden's African Image Archive</span>\r\n                </div>\r\n                <div className=\"navCont\">\r\n                {/*Navbar component, not including search-bar.*/}\r\n                <Navbar />\r\n                <div className=\"horzLine\"/>\r\n                <div className=\"sectionLine\"/>\r\n                </div>\r\n            </div>\r\n                <div className=\"background mainBody\">\r\n                    <div className=\"transBox\">\r\n                        <p id=\"HAIATITLE\"><mark className=\"colorWhite\">HAIA</mark> - africa images archive</p>\r\n                        <SearchBar id=\"HAIATITLE\"/>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Home;","C:\\Users\\afroj\\Documents\\haia_final\\src\\components\\navbarcomponent.js",["90","91","92","93","94"],[],"import { Switch, Route, Link} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport \"../style/haiastyles.css\";\r\nimport SearchBar from './searchbar';\r\nimport youtubeLogo from \"../img/youtubelogo.svg\"\r\n\r\n//Component for the nav bar, which will be shared by all webpages in site.\r\nconst Navbar = () => {\r\n    return ( \r\n        <div className = \"navWrap\">\r\n        <nav className=\"navbar\">\r\n                <ul className=\"navbarItem\"><a href=\"/home\">Home</a></ul>\r\n                {\r\n                //<a href=\"/about\">About</a>\r\n                }\r\n                <ul className=\"navbarItem\"><a href=\"/advsearch\">Advanced Search</a></ul>\r\n                <ul className=\"navbarItem\"><a href=\"https://www.youtube.com/channel/UCaIHjtxqn6_ej_jNLUXMeiw\">Youtube{/*<img src={youtubeLogo}/>*/}</a></ul>\r\n                <ul className=\"navbarItem\"><a href=\"/entryMod\">entryMod</a></ul>\r\n            \r\n            \r\n            \r\n        </nav>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Navbar;","C:\\Users\\afroj\\Documents\\haia_final\\src\\dev\\entrylist.js",[],[],[],"C:\\Users\\afroj\\Documents\\haia_final\\src\\pages\\entryMod.js",["95","96","97","98","99","100","101","102"],[],"//EntryMod: lists all entries in the database and allows for modification of the server database and thus the entry pool.\r\n\r\n//Imports\r\nimport React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport countryList from '../dev/countryList.js';\r\nimport idNames from '../dev/idNames.js';\r\nimport '../style/devstyle.css'\r\n\r\n//Import database class to access methods which allow for communications with database.\r\nimport database from '../service/database';\r\n\r\nconst EntryMod = props => {\r\n\r\n  const country_toISO = countryList;\r\n  const idfromName = idNames;\r\n  /*Notes on REACT function organization*/\r\n    //Before reaching the return bloc in any app return section, we may declare any number of variables and work wiht them. REMEMBER THAT!\r\n    //We may accordingly access those variables wiht the syntax { varname } as if it were either html section code or page text (inwhich case, the contents of the value are converted ot a string before input).\r\n    //We can also put in CODE within the curly braces, whose contents or return value will be given in the browser or returned as a Stirng.\r\n    \r\n    //Set of variables for all posisble searchterms\r\n    \r\n    const [commands, setCommands] = useState([])\r\n    const [text, setText] = useState(\"\");\r\n    //useEffect communicates that the render of this component is not complete even after a page load, so that the page can continue to render\r\n\r\n    //Add the delete process to this class to send off delete requests.\r\n    const deleteEntry = die =>{\r\n      die = die.substring(7);\r\n      console.log(die)\r\n      if(die.length == 24){\r\n        database.deleteEntry(die)\r\n              .catch(error => {\r\n                console.log(error);\r\n                setCommands([String.toString(error), ...commands]);\r\n              });\r\n          }\r\n      else{\r\n        setCommands([\"Invalid deletion request!\"])\r\n      }\r\n    }\r\n\r\n    const updateEntry = change => {\r\n      let updateBody = change.substring(7);\r\n      try{\r\n        let updateObj = JSON.parse(updateBody);\r\n        let updated;\r\n\r\n        //Check for essential properties. If any invalids then return (end)\r\n        if(\"hid\" in updateObj){\r\n          //Retrieve the object to be updated, or throw an error if it was not found.\r\n          database.get(updateObj.hid, \"hid\")\r\n                .then(response => {\r\n                    console.log(response.data.results);\r\n                    //Update using the merging of the original object and the new set of contents, overwriting older contents which conflict.\r\n                    updated = {...response.data.results[0], ...updateObj}\r\n                    //Update our log of commands.\r\n                    setCommands([JSON.stringify(response.data.results[0]) + '=>' + JSON.stringify(updated), ...commands]);\r\n                    database.updateEntry(updated);\r\n                })\r\n                .catch(error => {\r\n                  console.log(error)\r\n                  setCommands([\"Entry does not exist in the database!\", ...commands,])\r\n                })\r\n        }\r\n        else{\r\n          setCommands([JSON.stringify(updateObj), \"Invalid input!\", ...commands])\r\n          console.log(\"Invalid input!\", updateObj)\r\n        }\r\n    }\r\n    catch(error){\r\n      setCommands([...commands, updateBody,\"Invalid Input\"])\r\n      console.log(\"Invalid input!\", updateBody)\r\n    }\r\n    }\r\n\r\n    const postEntry = add => {\r\n      let addBody = add.substring(5);\r\n      try{\r\n        let addObj = JSON.parse(addBody);\r\n\r\n        if(addObj.hasOwnProperty(\"title\") && \"src\" in addObj && \"keywords\" in addObj && \"url\" in addObj && \"country\" in addObj){\r\n        //If the post-entry is valid, then we will generate an hid.\r\n        //Retrieve country code\r\n        let tempHID = '';\r\n          if(country_toISO[addObj.country]){\r\n            tempHID = country_toISO[addObj.country]\r\n          }\r\n          else{\r\n            setCommands(\"Invalid country input!\", ...commands)\r\n            return\r\n          }\r\n          //Use source to generate a book-code for the entry.\r\n          if(addObj.shortsrc){\r\n            tempHID = tempHID + idfromName[addObj.shortsrc.toUpperCase()];\r\n          }\r\n          else{\r\n            tempHID = tempHID + idfromName[addObj.src.toUpperCase()]\r\n          }\r\n          //First, retrieve any potentially matching hid vales from the database through a simple search query by hid, unpaginated.\r\n          database.find(tempHID, \"hid\")\r\n              .then(response => {\r\n                console.log(response.data.results)\r\n                //Then, use the size of the resulting set of HIDs to determine the numerical value to follow the base-tempHID (specifically, how many 0s.).\r\n                let i = (response.data.results.length + 1) + '';\r\n                for(let o = i.length; o < 4; o++){\r\n                  i = '0' + i;\r\n                }\r\n                addObj.hid = tempHID + i;\r\n                database.createEntry(addObj);\r\n              })\r\n              .catch(error => {\r\n                console.log(error)\r\n              })\r\n          }\r\n          else{\r\n            setCommands([JSON.stringify(addObj), ...commands]);\r\n            console.log(\"Invalid Input!\", addObj)\r\n          }\r\n      }\r\n      catch(error){\r\n        setCommands([addBody,\"Invalid Input\", ...commands]);\r\n        console.log(\"Invalid Input!\", addBody)\r\n      }\r\n    }\r\n\r\n    //Method meant to remove command request, since we already have determined that & acted appropriately.\r\n    /*function requestChop(string, to){\r\n      return string.substring(to)\r\n    }*/\r\n    \r\n    /*//Method meant to determine the individual fields\r\n    function fieldQuery(string, param){\r\n\r\n    }*/\r\n\r\n    function commandSend(string){\r\n      //this is a delete request\r\n      if(string.substring(0,7) =='delete:'){\r\n        console.log('delete request');\r\n        deleteEntry(string);\r\n      }\r\n      //this is a slice request\r\n      else if(string.substring(0,7) =='update:'){\r\n        console.log('update request');\r\n        updateEntry(string);\r\n      }\r\n      //this is a post request.\r\n      else if(string.substring(0,5) =='post:'){\r\n        console.log('post request');\r\n        postEntry(string);\r\n      }\r\n      else if(string == 'clear'){\r\n        console.log('clear request');\r\n      }\r\n      \r\n    }\r\n    //Use a FIFO queue to process dat.\r\n\r\n    //for each of the entry modification thingies, \r\n  \r\n  return (\r\n<div className =\"developerPage\">                          {/* Encompassing div to wrap all contained elements*/}\r\n        \r\n        {/*Div to contain the input history to the console.*/}\r\n        <div className=\"consoleLog\">\r\n        {  commands.map((entry, keyval) => (\r\n            <div className=\"indvLog\" key={keyval}>\r\n              {entry}\r\n            </div>\r\n          ))\r\n        }\r\n        </div>\r\n\r\n        {/*Div to contain the actual input bar.*/}\r\n        <div className=\"barMod\">\r\n            {/*Command input*/}\r\n            <input  className=\"bar\"\r\n                    type=\"text\"\r\n                    placeholder=\"\"\r\n                    value={text}\r\n                    onChange={e => setText(e.target.value)}\r\n                    onKeyUp={e => \r\n                      {if(e.key == 'Enter'){\r\n                        commandSend(text);\r\n                        setCommands([text, ...commands]);\r\n                        setText(\"\");\r\n                        console.log(\"Enter pressed\");\r\n                      }}\r\n                    }\r\n            />\r\n          {/*Button in case you want to press a button to send the input*/}\r\n          <button   onClick={ () =>\r\n                      {commandSend(text);\r\n                       setCommands([text, ...commands]);\r\n                       setText(\"\");\r\n                      }\r\n          }/>\r\n          </div>\r\n</div>);\r\n}\r\n  \r\n  //Return the app contents to the file\r\n  export default EntryMod;\r\n\r\n  //We want ENTRYMOD to BY DEFAULT send a FIND ALL call to the DATABASE.JS file, WHICH RETRIEVES ALL FILES, and for BUTTONS on the DISPLAYED RESULTS given FROM the DATABASE.JS file to then fire MORE methods from the DATABASE.JS file to MODIFY the general DATABASE.","C:\\Users\\afroj\\Documents\\haia_final\\src\\pages\\entry.js",["103","104","105","106","107","108"],[],"//Imports\r\nimport React from \"react\";\r\n\r\n//Allow for rendering and value changes of html elements\r\nimport { useState, useEffect } from \"react\";\r\n//Meant to manage the prop (passed-in value from the searchbar)\r\nimport { Link, useParams, useLocation } from \"react-router-dom\";\r\n//Access value passed through search query method.\r\n\r\n//Import database class which allows for communications with database in the case that one is needed.\r\nimport EntryDataService from '../service/database';\r\n\r\nfunction Entry(props) {\r\n    //Before reaching the return bloc in any app return section, we may declare any number of variables and work wiht them. REMEMBER THAT!\r\n    //We may accordingly access those variables wiht the syntax { varname } as if it were either html section code or page text (inwhich case, the contents of the value are converted ot a string before input).\r\n    //We can also put in CODE within the curly braces, whose contents or return value will be given in the browser or returned as a Stirng.\r\n    \r\n\r\n    //Opening program to arrange things before getting to the useState.\r\n    var params = useParams(); //params = location.state?.id ? null : useParams();\r\n    const location = useLocation();\r\n\r\n    //Would rather use the location state, if there is one, than reaccess te database. As such, if there is a location state, do not use the parameters.\r\n    if(location.state?.hid){\r\n      params = null;\r\n    }\r\n\r\n    //State variables.\r\n    const [entry, setEntry] = useState({});\r\n\r\n    //Use-effect method, to fire once to both retrieve corresponding entry for ID\r\n    useEffect(() => {\r\n      getEntry()\r\n    }, []);\r\n\r\n    async function getEntry() {\r\n      //If the params value has not been overwritten, this means we should use it for locating the entry in question.\r\n      if(params){\r\n        EntryDataService.get(params.hid, \"hid\")\r\n          .then(response => {\r\n            console.log(response.data, \"response retrieved from database.\")\r\n            setEntry(response.data.results[0]);\r\n          })\r\n          .catch(error => {\r\n            console.log(error)\r\n          });\r\n      }\r\n      //We actually do have a location.state object with an hid input and hopefully a set of entries. Use it to locate the value in the entries array.\r\n      else{\r\n        try{\r\n        let i = 0;\r\n        let found = false;\r\n        while(i < location.state.entries.length){\r\n          //We've found a match!\r\n          if(location.state.entries[i].hid == location.state.hid){\r\n            found = true;\r\n            break\r\n          }\r\n          //We've not found a match. Continue checking\r\n          else{\r\n            i = i+1;\r\n          }\r\n        }\r\n          if(found == true)\r\n            setEntry(location.state.entries[i])\r\n          else\r\n            throw new Error(\"Was not found in the given input?\")\r\n        }\r\n        catch(error){\r\n          console.log(error)\r\n        }\r\n      }\r\n    }\r\n    \r\n    const title = \"View an entry\";\r\n  \r\n    //IF something has been passed into the entry at URL (from searchResults), use that for the get method to retrieve the corresponding value\r\n    //If not, use the actual entry URL for the parameter to get something from the database.\r\n  \r\n    return (\r\n      <div className=\"content\">\r\n        <img src={entry.url} id=\"ENTRYIMG\"></img>\r\n        <h2>{entry.title}</h2>\r\n        <span>{entry.hid}</span>\r\n        <div>{entry.src}</div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  //Return the app contents to the file\r\n  export default Entry;","C:\\Users\\afroj\\Documents\\haia_final\\src\\pages\\searchResults.js",["109","110","111","112","113","114","115","116","117","118"],[],"//searchReults: displays results of a given search after being redirected to after a search query is made.\r\n\r\n//Imports\r\nimport React from \"react\";\r\n//Allow for rendering and value changes of html elements\r\nimport { useState, useEffect } from \"react\";\r\n//Meant to manage the prop (passed-in value from the searchbar)\r\nimport { Link, useParams, useLocation } from \"react-router-dom\";\r\n//Access value passed through search query method.\r\n\r\nimport Navbar from '../components/navbarcomponent';\r\n\r\nimport \"../style/haiastyles.css\"\r\n\r\n//Import database class which allows for communications with database.\r\nimport EntryDataService from '../service/database';\r\n\r\n//Takes in a set of props (inputs) from the search request which it will use when requesting things from the database for the results display.\r\nconst SearchResults = () => {\r\n/* SEARCH PREPARATION */\r\n  //location will contain values passed in through the search pages.\r\n  const location = useLocation();\r\n  const {type} = useParams();\r\n  const searchData = location.state;\r\n  \r\n  console.log(location.state, \"location prop\")\r\n  console.log(searchData, \"searchData taken from location prop\")\r\n  \r\n  const keywordsToArr = () => {\r\n    let keywordArray = [];\r\n    let currString = \"\";\r\n    for(let i = 0; i < searchData.keywords.length;i = i + 1){\r\n        if(searchData.keywords.charAt(i) != ','){\r\n            if(searchData.keywords.charAt(i) != ' '){\r\n                currString = currString + searchData.keywords.charAt(i);\r\n            }\r\n        }\r\n        else{\r\n            keywordArray.push(currString);\r\n            currString = '';\r\n        }\r\n    }\r\n    if(currString !== \"\"){\r\n      keywordArray.push(currString);\r\n    }\r\n    return keywordArray;\r\n  }\r\n\r\n  //Access already-given & guaranteed values from the input prop. If these don't exist, we have a problem.\r\n  var entriesPerPage = searchData.entriesPerPage;\r\n  var page = searchData.page;\r\n  var mode = searchData.mode;\r\n\r\n  const query = [];\r\n  const by = [];\r\n  //Determine which search terms and parameters have been given.\r\n  //create a query array which is a set of search terms, alongside a corresponding \"by\" array.\r\n  const queryBy = () => {\r\n    //If we have a TEXT field in our passed-in searchData prop, then we don't actually need to check for other input fields, because this means we're doing a basic search.\r\n    if(searchData.text !== undefined){\r\n      query.push(searchData.text);\r\n      by.push(\"text\");\r\n    }\r\n    //We DONT have a text field in our passed-in searchData prop, indicating an advanced search, and thereby need to check for what input fields DO exist.\r\n    else{\r\n      //Do we have an input title? If so, add it to the query and add \"title\" to the set of search conditions.\r\n      if(searchData.title !== \"\"){\r\n        query.push(searchData.title)\r\n        by.push(\"title\")\r\n      }\r\n      if(searchData.src !== \"\"){\r\n        query.push(searchData.src);\r\n        by.push(\"src\")\r\n      }\r\n      if(searchData.keywords !== \"\"){\r\n        query.push(keywordsToArr());\r\n        by.push(\"keywords\");\r\n      }\r\n    }\r\n  }\r\n\r\n  //If we need to access the database, we create an array of queries and what we are queryin by. These will be used to influence how the database is accessed.\r\n  if(mode){\r\n    queryBy();\r\n  }\r\n  console.log(query, by, \"queryBy\");\r\n  \r\n\r\n  /*RESULTS USESTATE PREPARATION*/\r\n \r\n  //Variable decs for results.\r\n  const [entries, setEntries] = useState([]);\r\n  //Contains all displayed objects for the page.\r\n  const [forThisPage, setForThisPage] = useState([]);\r\n  \r\n  /*SEARCH EXECUTION & RESULTS ORGANIZATION*/\r\n    //Takes a \"query\" array and a \"by\" array, and uses each to call a search method correspondingly, and parse through data.\r\n    //Page sorting should also take in an array (in query value). If it's an array of results as opposed to an array of query and by data (for a regular search), I want it to behave differently.\r\n\r\n  //useEffect indicates that the component is not done acting even after it renders, as it will await updates from the interacitons with the database.\r\n  useEffect(() => {\r\n    dataCall();\r\n  }, []);\r\n\r\n  async function dataCall () {\r\n\r\n                                                                                                                            //[ignore]QUERY may also contain RESULTS, FOR AN ATTEMPT TO PAGINATE THEM.\r\n    //PT 1: RETRIEVE ALL DATA FOR PAGE\r\n    //If MODE, then we actually still need to SEARCH for entries FROM the database.\r\n    if(mode){\r\n      //If \"by\" is text, we should execute a regular search looking for matches in ALL fields.\r\n      if(by[0] == \"text\"){\r\n        EntryDataService.find(query[0], by[0])\r\n          .then(response => {\r\n            console.log(response.data, \"text-based all-search\");\r\n            mode = false;\r\n            setEntries(response.data);\r\n            dataRefresh(response.data.results);\r\n          })\r\n          .catch(error => {\r\n            console.log(error)\r\n          })\r\n      }\r\n      //We are NOT doing a text search, BUT there is only ONE thing we're searching by. For this situation, we will use a regular paginated request to the database with a known find.\r\n      else if (by.length == 1) {\r\n          //Call the \"find\" method of the database, using our query value and the search criterion\r\n        EntryDataService.findPaginated(query[0], by[0], page, entriesPerPage)\r\n          .then(response => {\r\n            console.log(response.data, \"single-parameter search\");\r\n            setEntries(response.data);\r\n            dataRefresh(response.data.results);\r\n          })\r\n          .catch(error => {\r\n            console.log(error)\r\n          });\r\n      }\r\n      //Multiple \"by\" queries. Take these EXCLUSIVELY, so ALL requirements must be fulfilled for entry to be included.\r\n      else {\r\n        //Retrieve all entries fitting the first given criteria.\r\n        EntryDataService.find(query[0], by[0])\r\n          .then(response => {\r\n            console.log(response.data, \"Multiple-parameters advanced search; not yet parsed for all matches.\")\r\n            \r\n            //parse through data, determine what to put in final set of entries.\r\n\r\n            let matchingSet = []; \r\n            //For each value in our returned dataset...\r\n            for(let i = 0; i < response.data.results.length; i = i + 1){\r\n              let matching = true;\r\n              //Check against each query. If one query does NOT match, its corresponding object isn't to be added. Move on to next one.\r\n              for(let j = 1; j < query.length && matching == true; j = j + 1){\r\n                //Field with name contained in by[J] of search result \"i\" could be of types STRING or ARRAY. There are different procedures for each.\r\n                //Case 1: by[J] is a String.\r\n                if(typeof response.data.results[i][by[j]] == \"string\"){\r\n                  if(response.data.results[i][by[j]] == query[j].toLowerCase()){}\r\n                  else{\r\n                    matching = false;\r\n                  }\r\n                }\r\n                //Case 2: by[J] is an Array.\r\n                else if(Array.isArray(response.data.results[i][by[j]])){\r\n                  //We have an array at the field with name contained in by[J], check if all query values exist in the data\r\n                  for(let k = 0; k < query[j].length && matching == true; k = k + 1){\r\n                    if(response.data.results[i][by[j]].includes(query[j][k].toLowerCase())){}\r\n                    else{\r\n                      matching = false;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              //If our data entry DID match, add it to our set of total results.\r\n              if(matching){\r\n                matchingSet.push(response.data.results[i]);\r\n              }\r\n            }\r\n            setEntries(matchingSet);\r\n            console.log(matchingSet, \"matchingSet\")\r\n            mode = false;\r\n            dataRefresh(matchingSet)\r\n          })\r\n          .catch(error => {\r\n            console.log(error)\r\n          })   \r\n        }\r\n    }\r\n  \r\n  //No need to parse the entire database, simply determine the set of entries for the page.\r\n  else{\r\n    setEntries(searchData.allMatched);\r\n    dataRefresh(searchData.allMatched);\r\n  }\r\n  }\r\n\r\n  //Method to set the data for the page based on what was given.\r\n  function dataRefresh(arrayInput) {\r\n    console.log(\"dataRefresh\", arrayInput)\r\n    //PT 2: DETERMINE WHAT TO SHOW ON PAGE OUT OF ALL GIVEN RESULTS\r\n    //Now we will detemermine pagination & what to display on-page.\r\n    \r\n    let forpage = [];\r\n    //If the amount of results (stored to entries in the first part of the method) is equal to or less than the amount of entries per page; we already know what to set our page values to be.\r\n    if(arrayInput.length <= entriesPerPage){\r\n        forpage = [...arrayInput];\r\n    }\r\n    //If the amount of results is NOT equal to the amount of entries per page, we must determine what to show on the page out of a larger set.\r\n    else{\r\n      //Starting at the base for the page number, put things into the page\r\n      for(let i = (page-1)*entriesPerPage; i < entriesPerPage; i++){\r\n        forpage.push(arrayInput[i]);\r\n      }\r\n    }\r\n    //These values will be displayed on the page.\r\n    setForThisPage(forpage);\r\n  }\r\n\r\n  return (\r\n    <div id=\"RESULTSPAGE\">\r\n    <div className = \"top\">\r\n                <div className=\"homeBar\">\r\n                    <span className=\"siteHeadSmall\"> - Advanced search - </span>\r\n                </div>\r\n                <div className=\"navCont\">\r\n                {/*Navbar component, not including search-bar.*/}\r\n                <Navbar />\r\n                <div className=\"horzLine\"/>\r\n                </div>\r\n    </div>\r\n    <div id=\"DEFAULTMAIN\">\r\n      <div className=\"results\">\r\n          {  forThisPage.map((entry, keyval) => (\r\n            <Link to={'/entry/'+ entry.hid}\r\n                  state={{\r\n                          mode:mode,\r\n                          page:page,\r\n                          entriesPerPage:entriesPerPage,\r\n                          text:searchData.text,\r\n                          title:searchData.title,\r\n                          src:searchData.src,\r\n                          keywords:searchData.keywords,\r\n                          allMatched:entries,\r\n                          object:entry\r\n                  }}\r\n            >\r\n                    <div className=\"result fadeIn\" key={keyval}>\r\n                      <h4 id=\"TITLE\">{entry.title}</h4>\r\n                      <div className=\"cont\">\r\n                          <img src={entry.url}></img>\r\n                          <p id=\"HID\">{entry.hid}</p>\r\n                      </div>\r\n                    </div>\r\n              </Link>\r\n            ))\r\n          }\r\n        </div>\r\n      <div id=\"NUMRESULTS\">number of results: {forThisPage.length}</div>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n  }\r\n  //Return the app contents to the file\r\n  export default SearchResults;","C:\\Users\\afroj\\Documents\\haia_final\\src\\pages\\advancedSearch.js",["119","120","121","122","123"],[],"C:\\Users\\afroj\\Documents\\haia_final\\src\\components\\searchbar.js",["124","125","126"],[],"//Imports\r\nimport React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"../style/haiastyles.css\"\r\n\r\n//Import database class which allows for communications with database.\r\nimport EntryDataService from '../service/database';\r\n\r\n//import searchResults?\r\nimport SearchResults from \"../pages/searchResults\"\r\n\r\n\r\n//The point of this class is to send off to the search results page with only the text string given. The search results page should know that since no other specificaitons were given, it is to generally search the database by a default value or process.\r\n\r\nconst SearchBar = () => {\r\n\r\n    //When the value is changed, we chang te text value. When te button is hit, we send out hte  value into a search redirect.\r\n    const [text, setText] = useState(\"\");\r\n    \r\n    return(\r\n        <div className=\"searchBar\">\r\n        <input  type=\"text\"\r\n                className=\"bar\"\r\n                placeholder=\"Look for things!\"\r\n                value={text}\r\n                onChange={e => setText(e.target.value)}\r\n        />\r\n                \r\n        <Link   to={\r\n                    \"/search/GenBar\"\r\n                }\r\n                //Sends over a props file to the searchResults page, indicating what text we are looking for, how many entries per page, which page we will be viewing, and whether we need to actually connect to the database to find it.\r\n                state={\r\n                    {\r\n                        text:text,\r\n                        entriesPerPage:\"25\",\r\n                        page:1,\r\n                        mode:true\r\n                    }\r\n                 }\r\n                 >\r\n            <button className=\"searchButton\"\r\n                type=\"button\"\r\n                \r\n            >\r\n                Search\r\n            </button>\r\n        </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar\r\n\r\n//When we hit the searchbar or the ADVANCEDSEARCH, we want to REDIRECT to the SEARCHRESULT page layout with a QUERY having been given (with or without filters) to the GET or FIND methods defined in DATABASE.JS.","C:\\Users\\afroj\\Documents\\haia_final\\src\\service\\database.js",[],[],"C:\\Users\\afroj\\Documents\\haia_final\\src\\http-common.js",[],[],"C:\\Users\\afroj\\Documents\\haia_final\\src\\dev\\countryList.js",[],[],"C:\\Users\\afroj\\Documents\\haia_final\\src\\dev\\idNames.js",[],[],{"ruleId":"127","severity":1,"message":"128","line":4,"column":8,"nodeType":"129","messageId":"130","endLine":4,"endColumn":17},{"ruleId":"127","severity":1,"message":"131","line":11,"column":8,"nodeType":"129","messageId":"130","endLine":11,"endColumn":18},{"ruleId":"127","severity":1,"message":"132","line":13,"column":25,"nodeType":"129","messageId":"130","endLine":13,"endColumn":29},{"ruleId":"127","severity":1,"message":"133","line":23,"column":9,"nodeType":"129","messageId":"130","endLine":23,"endColumn":14},{"ruleId":"127","severity":1,"message":"134","line":12,"column":9,"nodeType":"129","messageId":"130","endLine":12,"endColumn":16},{"ruleId":"127","severity":1,"message":"132","line":14,"column":10,"nodeType":"129","messageId":"130","endLine":14,"endColumn":14},{"ruleId":"127","severity":1,"message":"135","line":20,"column":10,"nodeType":"129","messageId":"130","endLine":20,"endColumn":18},{"ruleId":"127","severity":1,"message":"136","line":20,"column":20,"nodeType":"129","messageId":"130","endLine":20,"endColumn":29},{"ruleId":"127","severity":1,"message":"137","line":23,"column":8,"nodeType":"129","messageId":"130","endLine":23,"endColumn":17},{"ruleId":"138","severity":1,"message":"139","line":31,"column":21,"nodeType":"140","endLine":31,"endColumn":38},{"ruleId":"127","severity":1,"message":"141","line":1,"column":10,"nodeType":"129","messageId":"130","endLine":1,"endColumn":16},{"ruleId":"127","severity":1,"message":"142","line":1,"column":18,"nodeType":"129","messageId":"130","endLine":1,"endColumn":23},{"ruleId":"127","severity":1,"message":"132","line":1,"column":25,"nodeType":"129","messageId":"130","endLine":1,"endColumn":29},{"ruleId":"127","severity":1,"message":"128","line":4,"column":8,"nodeType":"129","messageId":"130","endLine":4,"endColumn":17},{"ruleId":"127","severity":1,"message":"143","line":5,"column":8,"nodeType":"129","messageId":"130","endLine":5,"endColumn":19},{"ruleId":"127","severity":1,"message":"136","line":5,"column":20,"nodeType":"129","messageId":"130","endLine":5,"endColumn":29},{"ruleId":"127","severity":1,"message":"132","line":6,"column":10,"nodeType":"129","messageId":"130","endLine":6,"endColumn":14},{"ruleId":"144","severity":1,"message":"145","line":33,"column":21,"nodeType":"146","messageId":"147","endLine":33,"endColumn":23},{"ruleId":"144","severity":1,"message":"145","line":141,"column":32,"nodeType":"146","messageId":"147","endLine":141,"endColumn":34},{"ruleId":"144","severity":1,"message":"145","line":146,"column":37,"nodeType":"146","messageId":"147","endLine":146,"endColumn":39},{"ruleId":"144","severity":1,"message":"145","line":151,"column":37,"nodeType":"146","messageId":"147","endLine":151,"endColumn":39},{"ruleId":"144","severity":1,"message":"145","line":155,"column":22,"nodeType":"146","messageId":"147","endLine":155,"endColumn":24},{"ruleId":"144","severity":1,"message":"145","line":186,"column":33,"nodeType":"146","messageId":"147","endLine":186,"endColumn":35},{"ruleId":"127","severity":1,"message":"132","line":7,"column":10,"nodeType":"129","messageId":"130","endLine":7,"endColumn":14},{"ruleId":"148","severity":1,"message":"149","line":34,"column":8,"nodeType":"150","endLine":34,"endColumn":10,"suggestions":"151"},{"ruleId":"144","severity":1,"message":"145","line":55,"column":44,"nodeType":"146","messageId":"147","endLine":55,"endColumn":46},{"ruleId":"144","severity":1,"message":"145","line":64,"column":20,"nodeType":"146","messageId":"147","endLine":64,"endColumn":22},{"ruleId":"127","severity":1,"message":"133","line":75,"column":11,"nodeType":"129","messageId":"130","endLine":75,"endColumn":16},{"ruleId":"138","severity":1,"message":"139","line":82,"column":9,"nodeType":"140","endLine":82,"endColumn":44},{"ruleId":"127","severity":1,"message":"152","line":23,"column":10,"nodeType":"129","messageId":"130","endLine":23,"endColumn":14},{"ruleId":"144","severity":1,"message":"153","line":33,"column":42,"nodeType":"146","messageId":"147","endLine":33,"endColumn":44},{"ruleId":"144","severity":1,"message":"153","line":34,"column":46,"nodeType":"146","messageId":"147","endLine":34,"endColumn":48},{"ruleId":"148","severity":1,"message":"154","line":103,"column":6,"nodeType":"150","endLine":103,"endColumn":8,"suggestions":"155"},{"ruleId":"144","severity":1,"message":"145","line":112,"column":16,"nodeType":"146","messageId":"147","endLine":112,"endColumn":18},{"ruleId":"144","severity":1,"message":"145","line":125,"column":26,"nodeType":"146","messageId":"147","endLine":125,"endColumn":28},{"ruleId":"144","severity":1,"message":"145","line":151,"column":59,"nodeType":"146","messageId":"147","endLine":151,"endColumn":61},{"ruleId":"144","severity":1,"message":"145","line":155,"column":54,"nodeType":"146","messageId":"147","endLine":155,"endColumn":56},{"ruleId":"144","severity":1,"message":"145","line":163,"column":66,"nodeType":"146","messageId":"147","endLine":163,"endColumn":68},{"ruleId":"138","severity":1,"message":"139","line":247,"column":27,"nodeType":"140","endLine":247,"endColumn":48},{"ruleId":"127","severity":1,"message":"156","line":4,"column":8,"nodeType":"129","messageId":"130","endLine":4,"endColumn":12},{"ruleId":"127","severity":1,"message":"136","line":9,"column":20,"nodeType":"129","messageId":"130","endLine":9,"endColumn":29},{"ruleId":"127","severity":1,"message":"157","line":14,"column":8,"nodeType":"129","messageId":"130","endLine":14,"endColumn":24},{"ruleId":"127","severity":1,"message":"158","line":17,"column":8,"nodeType":"129","messageId":"130","endLine":17,"endColumn":21},{"ruleId":"138","severity":1,"message":"139","line":122,"column":13,"nodeType":"140","endLine":122,"endColumn":90},{"ruleId":"127","severity":1,"message":"136","line":3,"column":20,"nodeType":"129","messageId":"130","endLine":3,"endColumn":29},{"ruleId":"127","severity":1,"message":"157","line":9,"column":8,"nodeType":"129","messageId":"130","endLine":9,"endColumn":24},{"ruleId":"127","severity":1,"message":"158","line":12,"column":8,"nodeType":"129","messageId":"130","endLine":12,"endColumn":21},"no-unused-vars","'SearchBar' is defined but never used.","Identifier","unusedVar","'haiastyles' is defined but never used.","'Link' is defined but never used.","'title' is assigned a value but never used.","'NavLink' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Entrylist' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Switch' is defined but never used.","'Route' is defined but never used.","'youtubeLogo' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getEntry'. Either include it or remove the dependency array.","ArrayExpression",["159"],"'type' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'dataCall'. Either include it or remove the dependency array.",["160"],"'logo' is defined but never used.","'EntryDataService' is defined but never used.","'SearchResults' is defined but never used.",{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [getEntry]",{"range":"165","text":"166"},"Update the dependencies array to be: [dataCall]",{"range":"167","text":"168"},[1625,1627],"[getEntry]",[4106,4108],"[dataCall]"]